import os
import openai
import requests
from telegram import Update
from telegram.ext import Application, CommandHandler, MessageHandler, filters, CallbackContext
from dotenv import load_dotenv

# –ó–∞–≥—Ä—É–∑–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
load_dotenv()

TELEGRAM_TOKEN = os.getenv("TELEGRAM_TOKEN")
OPENAI_API_KEY = os.getenv("OPENAI_API_KEY")
openai.api_key = OPENAI_API_KEY

# –°—Ç–∞—Ä—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
async def start(update: Update, context: CallbackContext):
    message = (
        "–ü—Ä–∏–≤–µ—Ç! –Ø –ø–æ–º–æ–≥—É –≤–∞–º —Ä–∞—Å—Å—á–∏—Ç–∞—Ç—å —Å—Ç–æ–∏–º–æ—Å—Ç—å –∞–≤—Ç–æ–º–æ–±–∏–ª—è.\n"
        "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –∞–≤—Ç–æ–º–æ–±–∏–ª—è –≤ —Å–ª–µ–¥—É—é—â–µ–º —Ñ–æ—Ä–º–∞—Ç–µ:\n\n"
        "- –ú–∞—Ä–∫–∞\n"
        "- –ú–æ–¥–µ–ª—å\n"
        "- –ì–æ–¥ –≤—ã–ø—É—Å–∫–∞\n"
        "- –û–±—ä–µ–º –¥–≤–∏–≥–∞—Ç–µ–ª—è (–≤ –ª–∏—Ç—Ä–∞—Ö)\n\n"
        "–ü—Ä–∏–º–µ—Ä: Honda Civic 2021, 1.5 –ª\n\n"
        "üí° –°–∞–º—ã–µ –≤—ã–≥–æ–¥–Ω—ã–µ —É—Å–ª–æ–≤–∏—è –ø—Ä–∏ –≤–≤–æ–∑–µ –∞–≤—Ç–æ –æ—Ç 3 –¥–æ 5 –ª–µ—Ç."
    )
    await update.message.reply_text(message)

# –ö–æ–º–∞–Ω–¥–∞ /help
async def help_command(update: Update, context: CallbackContext):
    await update.message.reply_text("–í–≤–µ–¥–∏—Ç–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –∞–≤—Ç–æ–º–æ–±–∏–ª—è –∫–∞–∫ —É–∫–∞–∑–∞–Ω–æ –≤ /start. –ü—Ä–∏–º–µ—Ä: Toyota Camry 2020, 2.0 –ª")

# –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
async def handle_message(update: Update, context: CallbackContext):
    user_input = update.message.text

    # –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –ø–∞—Ä—Å–∏–Ω–≥ —á–µ—Ä–µ–∑ GPT, BeautifulSoup –∏ —Ç.–ø. 
    # –°–µ–π—á–∞—Å –ø—Ä–æ—Å—Ç–æ –ø—Ä–∏–º–µ—Ä —Å –∑–∞–≥–æ—Ç–æ–≤–ª–µ–Ω–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏:
    brand = "Honda"
    model = "Civic"
    year = 2021
    engine_liters = 1.5
    engine_cm3 = int(engine_liters * 1000) - 2  # —É–º–µ–Ω—å—à–∞–µ–º –Ω–∞ 2 —Å–º¬≥

    # –°—Ä–µ–¥–Ω—è—è —Ü–µ–Ω–∞ —Å —Å–∞–π—Ç–∞ (–ø–æ–∫–∞ –∑–∞–≥–ª—É—à–∫–∞)
    car_price_cny = 89800  # –í –±—É–¥—É—â–µ–º –∑–∞–º–µ–Ω–∏–º –Ω–∞ —Å–∫—Ä–µ–π–ø–∏–Ω–≥ —Å —Å–∞–π—Ç–∞
    exchange_rate = 13  # –ü—Ä–∏–º–µ—Ä–Ω—ã–π –∫—É—Ä—Å —é–∞–Ω—è –∫ —Ä—É–±–ª—é
    car_price_rub = car_price_cny * exchange_rate

    # –†–∞—Å—á—ë—Ç –ø–æ—à–ª–∏–Ω—ã –ø–æ —Ç–∞–±–ª–∏—Ü–µ –¥–ª—è 3-5 –ª–µ—Ç
    if engine_cm3 <= 1000:
        duty = engine_cm3 * 1.5
    elif engine_cm3 <= 1500:
        duty = engine_cm3 * 1.7
    elif engine_cm3 <= 1800:
        duty = engine_cm3 * 2.5
    elif engine_cm3 <= 2300:
        duty = engine_cm3 * 2.7
    elif engine_cm3 <= 3000:
        duty = engine_cm3 * 3
    else:
        duty = engine_cm3 * 3.6

    # –ö–æ–º–∏—Å—Å–∏–∏
    commission_hidden = car_price_cny * 0.15  # –ù–µ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º
    commission_invoice = car_price_cny * 0.025
    delivery_total = (15000 + commission_hidden) * exchange_rate
    recycle_fee = 3400  # –§–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Å–±–æ—Ä

    total = car_price_rub + duty + commission_invoice * exchange_rate + delivery_total + recycle_fee

    response = (
        f"üìÑ –ü–∞—Ä–∞–º–µ—Ç—Ä—ã: {brand} {model} {year}, {engine_cm3} —Å–º¬≥\n"
        f"üí∞ –°—Ä–µ–¥–Ω—è—è —Ü–µ–Ω–∞: ¬•{car_price_cny} (~{car_price_rub:,.0f} ‚ÇΩ)\n"
        f"üì¶ –î–æ—Å—Ç–∞–≤–∫–∞ + –ø—Ä–æ–≤–µ—Ä–∫–∞: ~{delivery_total:,.0f} ‚ÇΩ\n"
        f"üßæ –ö–æ–º–∏—Å—Å–∏—è –∑–∞ –∏–Ω–≤–æ–π—Å: ~{commission_invoice * exchange_rate:,.0f} ‚ÇΩ\n"
        f"üõÉ –ü–æ—à–ª–∏–Ω–∞: ~{duty:,.0f} ‚ÇΩ\n"
        f"‚ôªÔ∏è –£—Ç–∏–ª–∏–∑–∞—Ü–∏–æ–Ω–Ω—ã–π —Å–±–æ—Ä: {recycle_fee} ‚ÇΩ\n\n"
        f"üí∏ –ò—Ç–æ–≥–æ–≤–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å: ~{total:,.0f} ‚ÇΩ\n\n"
        f"üì© –°–≤—è–∂–∏—Ç–µ—Å—å —Å –º–µ–Ω–µ–¥–∂–µ—Ä–æ–º: @your_manager\n"
        f"üñºÔ∏è –§–æ—Ç–æ –∞–≤—Ç–æ: [–≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ]"
    )
    await update.message.reply_text(response)

# –ó–∞–ø—É—Å–∫ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
async def main():
    application = Application.builder().token(TELEGRAM_TOKEN).build()
    application.add_handler(CommandHandler("start", start))
    application.add_handler(CommandHandler("help", help_command))
    application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_message))
    await application.run_polling()

if __name__ == '__main__':
    import asyncio
    asyncio.run(main())
